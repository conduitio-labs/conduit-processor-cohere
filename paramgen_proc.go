// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package cohere

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	ProcessorConfigApiKey                    = "apiKey"
	ProcessorConfigBackoffRetryCount         = "backoffRetry.count"
	ProcessorConfigBackoffRetryFactor        = "backoffRetry.factor"
	ProcessorConfigBackoffRetryMax           = "backoffRetry.max"
	ProcessorConfigBackoffRetryMin           = "backoffRetry.min"
	ProcessorConfigEmbedConfigEmbeddingTypes = "embedConfig.embeddingTypes"
	ProcessorConfigEmbedConfigInputType      = "embedConfig.inputType"
	ProcessorConfigEmbedConfigTruncate       = "embedConfig.truncate"
	ProcessorConfigModel                     = "model"
	ProcessorConfigModelVersion              = "modelVersion"
	ProcessorConfigResponseBody              = "response.body"
)

func (ProcessorConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		ProcessorConfigApiKey: {
			Default:     "",
			Description: "APIKey is the API key for Cohere api calls.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ProcessorConfigBackoffRetryCount: {
			Default:     "0",
			Description: "Maximum number of retries for an individual record when backing off following an error.",
			Type:        config.ParameterTypeFloat,
			Validations: []config.Validation{
				config.ValidationGreaterThan{V: -1},
			},
		},
		ProcessorConfigBackoffRetryFactor: {
			Default:     "2",
			Description: "The multiplying factor for each increment step.",
			Type:        config.ParameterTypeFloat,
			Validations: []config.Validation{
				config.ValidationGreaterThan{V: 0},
			},
		},
		ProcessorConfigBackoffRetryMax: {
			Default:     "5s",
			Description: "The maximum waiting time before retrying.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		ProcessorConfigBackoffRetryMin: {
			Default:     "100ms",
			Description: "The minimum waiting time before retrying.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		ProcessorConfigEmbedConfigEmbeddingTypes: {
			Default:     "",
			Description: "Specifies the types of embeddings you want to get back. Can be one or more of the allowed types.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ProcessorConfigEmbedConfigInputType: {
			Default:     "",
			Description: "Specifies the type of input passed to the model. Required for embedding models v3 and higher.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"search_document", "search_query", "classification", "clustering", "image"}},
			},
		},
		ProcessorConfigEmbedConfigTruncate: {
			Default:     "NONE",
			Description: "Specifies how the API will handle inputs longer than the maximum token length.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"NONE", "START", "END"}},
			},
		},
		ProcessorConfigModel: {
			Default:     "command",
			Description: "Model is one of the Cohere model (command,embed,rerank).",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ProcessorConfigModelVersion: {
			Default:     "command",
			Description: "ModelVersion is version of one of the models (command,embed,rerank).",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ProcessorConfigResponseBody: {
			Default:     ".Payload.After",
			Description: "Specifies in which field should the response body be saved.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
